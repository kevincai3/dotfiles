"Preamble {{{1
set nocompatible               " be iMproved, required
set backspace=indent,eol,start
let mapleader = ','

if executable('stack')
  " We need a project specific path for haskell tools to work
  let $PATH .=  substitute((':' . system('stack path --compiler-bin') . '/'), '[\r|\n]', '', 'g')
endif
" VimPlug - Plugin Definitions {{{1

call plug#begin('~/.vim/plugged')
" Bundles here:

" Fuzzy file searching
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --bin'}
Plug 'junegunn/fzf.vim'

" Searching
Plug 'brooth/far.vim', {'branch': 'dev'} "Only dev branch has support for ripgrep
Plug 'jremmen/vim-ripgrep'

" Vim Motion Extensions
Plug 'tpope/vim-surround' "Easily change surrunding brackets
  Plug 'tpope/vim-repeat' "Repeat for vim-surround
Plug 'vim-scripts/argtextobj.vim' "Convert arguments into objects
Plug 'Lokaltog/vim-easymotion' "Jump around buffer

" Vim manipulations
Plug 'godlygeek/tabular' "Easy tables
Plug 'scrooloose/nerdcommenter' "Easy Comments

" Vim Apparence
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
Plug 'kshenoy/vim-signature' "Show marks in the gutter

" Syntax and Language Specifics
Plug 'sheerun/vim-polyglot' "Bunch of syntax in one plugin
Plug 'w0rp/ale' "Linter
Plug 'sbdchd/neoformat' "Code formatting

" Language specifics
Plug 'hail2u/vim-css3-syntax' "Extra CSS3 highlighting
Plug 'bitc/vim-hdevtools' "Haskell type information

" Git integration
Plug 'tpope/vim-fugitive' "Need to learn
  Plug 'tpope/vim-rhubarb' "Github plugins

" Auto Complete
"Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' }
Plug 'Raimondi/delimitMate' "Autocomplete brackets
" Testing autocomplete
Plug 'zxqfl/tabnine-vim'

" Directory specific vimrc
Plug 'embear/vim-localvimrc'

" Perserve window when deleting buffer
Plug 'qpkorr/vim-bufkill'

" Tree view is sometimes useful
Plug 'scrooloose/nerdtree'

" Misc
Plug 'vim-scripts/restore_view.vim' "Preserves folds through buffer enter and leaves
Plug 'mbbill/undotree' "AMAZING
Plug 'wincent/terminus' "Better iterm integration
Plug 'rizzatti/dash.vim' "Dash Integrations

" Required:
call plug#end()

"Plugin Configs {{{1
" airline {{{2
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

if has("mac")
  let g:airline_left_alt_sep = ""
  let g:airline_left_sep = ""
  let g:airline_right_alt_sep = ""
  let g:airline_right_sep = ""
  let g:airline_symbols.branch = ""
  let g:airline_symbols.readonly = ""
  let g:airline_symbols.linenr = ""
  let g:airline_theme="solarized"
endif

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamecollapse = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#ale#error_symbol = 'E:'
let g:airline#extensions#ale#warning_symbol = 'W:'

" ale {{{2
let g:ale_lint_on_text_changed = 'never'
let g:ale_set_ballons = 1 " NVIM currently doesn't support hovers

let g:ale_linters = {
      \ 'javascript': ['eslint', 'flow'],
      \ 'haskell': ['hdevtools'],
      \ 'ruby': ['rubocop']
      \}

nmap <silent> <leader>j :ALENext<CR>
nmap <silent> <leader>k :ALEPrevious<CR>

" FLEXPORT
let g:ale_ruby_rubocop_options = '-c ~/flexport/.rubocop_next.yml --display-cop-names --display-style-guide'

" dash {{{2
nmap <leader>d <Plug>DashSearch

"delimitMate {{{2
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 2

" far {{{2
let g:far#source='rg'
let g:far#highlight_match=0
let g:far#limit=10000
let g:far#result_preview=0
let g:far#preview_window_height=20
let g:far#preview_window_scroll_step=4

" Find and Replace (global)
nnoremap <leader>R :Far <c-r><c-w>  *<left><left>
vnoremap <leader>R "my:Far "<c-r>m"  *<left><left>

"fzf {{{2
" Jump to exsting window if possible
let g:fzf_buffers_jump = 1

let $FZF_DEFAULT_COMMAND = 'rg --files --no-ignore --no-messages --hidden --follow --glob "!.git/*"'

nnoremap <silent> <leader>pp :Files<CR>
nnoremap <silent> <leader>pb :Buffers<CR>

"localvimrc {{{2
let g:localvimrc_whitelist='.*/proj/\.lvimrc'

" neoformat {{{2
" enable basic formatting when filetype is not found
let g:neoformat_basic_format_align = 1
let g:neoformat_try_formatprg = 1

nnoremap ==G :Neoformat<CR>
" polyglot {{{2
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords

" ripgrep {{{2
" lets sort our results
let g:rg_binary = 'rg'
let g:rg_command = g:rg_binary . ' --vimgrep --sort path'

" solarized colour scheme {{{2
colorscheme solarized
if has("gui_running")
  set background=light
else
  set t_Co=256
  colorscheme solarized
  set background=dark
endif

" tabularize {{{2
nnoremap <leader>tt :Tabularize /

" tagbar {{{2
let g:tagbar_zoomwidth = 0

" undotree {{{2
nnoremap <leader>u :UndotreeToggle<CR>

"vim-easymotion {{{2
vmap f <leader><leader>f
vmap F <leader><leader>F
vmap t <leader><leader>t
vmap T <leader><leader>T
nmap f <Plug>(easymotion-sl)
nmap F <leader><leader>F
nmap t <leader><leader>t
nmap T <leader><leader>T
nmap w <leader><leader>w
nmap W <leader><leader>W
nmap b <leader><leader>b
nmap B <leader><leader>B
nmap e <leader><leader>e
nmap E <leader><leader>E
nmap cf c<leader><leader>f
nmap cF c<leader><leader>F
nmap ct c<leader><leader>t
nmap cT c<leader><leader>T
nmap df d<leader><leader>f
nmap dF d<leader><leader>F
nmap dt d<leader><leader>t
nmap dT d<leader><leader>T

"vim-signature {{{2
nmap dmm m-
nmap dma m<space>

" YouCompleteMe {{{2
if has ('mac')
  let g:ycm_autoclose_preview_window_after_insertion = 1
  let g:ycm_confirm_extra_conf = 0
  let g:ycm_warning_symbol = '₩₩'
  let g:ycm_error_symbol = '€€'
endif

let g:ycm_disable_for_files_larger_than_kb = 40

let g:ycm_semantic_triggers = {
      \'css': [ 're!^\s\s\s', 're!:\s+' ],
      \}
let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf.py"

"Vim Basic Settings {{{1

" Setting up persistent undo
if has("persistent_undo")
  let MyUndoDir='~/.undodir/'
  if !isdirectory(MyUndoDir)
    call system('mkdir -p ' . MyUndoDir)
  endif
  set undofile
  set undodir=~/.undodir/
endif

" Line Numbers
set number
set encoding=utf-8
set history=700
set showcmd

" Set autoindent
set autoindent

" Used for restore_view
set viewoptions=cursor,folds,slash,unix

" Highlights while searching
set incsearch
set hlsearch

" Turn off autofolding
"set nofoldenable

" Unix line endings
set ff=unix

" Displays Column Number
set ruler

" Commandline Height
set cmdheight=2

" Always show the status line
set laststatus=2

" Hides buffer when abandoned
set hidden

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" No annoying sound on errors
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=
set tm=500

" Scroll with context
set scroll=3

" Tab settings
set expandtab
set shiftwidth=2
set softtabstop=-1 "Make it depend on shiftwidth
set tabstop=2

" Fold manually TODO: Maybe only apply this for .vimrc?
set foldmethod=marker

" Don't auto close all folds
set foldlevelstart=99

" Case insensitve if all lowercase. Else case sensitive.
set ignorecase
set smartcase

" Autocompletes filenames like bash
set wildmode=longest,list

" Shows unprintable characters
set list
set listchars=eol:¬,tab:▶·
hi SpecialKey guibg=#FEF7E7

" Prevent two file changes on save
set nowritebackup

" Invisible character colors
"highlight NonText guifg=#4a4a59
"highlight SpecialKey guifg=#4a4a59

set splitright

" Mark lines over 80

highlight OverLength ctermbg=10 ctermfg=7 guibg=#e2d6b6
match OverLength /\%81v.\+/

" Always have lines showing when scrolling
set scrolloff=5

if has("gui_running")
  set guioptions+=Tmrl
  set guioptions-=Tmrl
  if has("mac")
    set guifont=Menlo\ for\ Powerline:h12
    set guioptions+=r
  endif
endif

" Allow omni completion
set omnifunc=syntaxcomplete#Complete

" Allow modelines
set modeline

if executable('rg') == 1
  set grepprg=rg\ --vimgrep
end

"Custom Mappings {{{1
"Changes directory to current file TODO: Put this in shortcuts
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

"Don't move on *
nnoremap * *<c-o>

" Centers word in middle on n and N
nnoremap n nzzzv
nnoremap N Nzzzv

" Gotta put that space to good use
nnoremap <space> :bn<cr>

" Shift space does not work in terminal mode!
" We'll need a GUI for nvim
nnoremap <S-space> :bp<cr>

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Yanks from cursor to end of line.
map Y y$

" Quickly edit/reload the vimrc file
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>lv :so $MYVIMRC<CR>

" Switch between source and header file
nnoremap <silent> <leader>sf :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
nnoremap <silent> <leader>SF :vs <CR>:e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>

" Remove highlighting from searching
nnoremap <silent>\ :noh<CR>

" Allow quick window switching
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Re-highlight selection after shifting
vnoremap > >gv
vnoremap < <gv

" Shift key is too hard to press
vnoremap ; :
nnoremap ; :

" Commandline behaviour
nnoremap <c-a> <home>
nnoremap <c-e> <end>

inoremap <c-a> <home>
inoremap <c-e> <end>

cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Faster movements
nnoremap s <c-d>
nnoremap S <c-u>

" Search (global)
nnoremap <leader>s :Rg <c-r><c-w>
vnoremap <leader>s "my:Rg "<c-r>m"

" Find and Replace (local)
nnoremap <leader>r :%s//gc<left><left><left>
vnoremap <leader>r "my:%s/<c-r>m//gc<left><left><left>

vnoremap / "my/<c-r>m<cr>

if has('nvim')
  " Terminfo problem
  " https://github.com/neovim/neovim/issues/2048#issuecomment-78045837
  " Current workaround
  nmap <BS> <C-w>h

  tnoremap <ESC> <C-\><C-n>

  tnoremap <A-h> <C-\><C-n><C-w>h
  tnoremap <A-j> <C-\><C-n><C-w>j
  tnoremap <A-k> <C-\><C-n><C-w>k
  tnoremap <A-l> <C-\><C-n><C-w>l
  nnoremap <A-h> <C-w>h
  nnoremap <A-j> <C-w>j
  nnoremap <A-k> <C-w>k
  nnoremap <A-l> <C-w>l
endif


" Abbreviations for commandline
ca Wq wq
"Commands {{{1

" Cannot have the pipe in cnorea
"command! WQ w|bd
"cnorea wq WQ

cnorea b BD

command! WBD w|BD
cnorea wb WBD

"User Defined Functions {{{1
function! BindCommand()

endfunction

if !exists(":ClearTraillingWhitespace")
  command ClearTraillingWhitespace %s/\s\+$//
endif

"TODO: Define function for binding commands only if command does not exists
" Diff this file with the corresponding file on disk
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif

if has ('mac')
  if exists(":EditAlias")
    delcommand EditAlias
  endif
  command EditAlias e ~/.alias.sh
  if exists(":OpenTerm")
    delcommand OpenTerm
  endif
  command OpenTerm call system("open -a Terminal '".getcwd()."'")
endif

"Autocmds {{{1

augroup vimrcEx
  "Clear all autocmds in the group
  autocmd!
  "Jump to last cursor position
  autocmd BufReadPost *
        \ if line("'\'") > 0 && line("'\'") <= line("$") |
        \    exe "normal g`\"" |
        \ endif
augroup END

augroup blah
  autocmd!
  " Turn off autoindent for comments for all files
  " :help |fo-table|
  autocmd FileType * setlocal formatoptions-=cro
  autocmd FileType html setlocal shiftwidth=2
  autocmd FileType sql setlocal shiftwidth=2
  autocmd FileType py setlocal shiftwidth=2
  autocmd FileType ejs setlocal syntax=html
  autocmd Filetype jsx setlocal filetype=javascript.jsx

  " For node projects
  autocmd BufNewFile,BufRead www setfiletype javascript

  autocmd BufNewFile,BufRead *.ejs setfiletype ejs
  autocmd BufNewFile,BufRead *.tex setfiletype tex
  autocmd BufNewFile,BufRead *.nvimrc setfiletype vim

augroup END

" Neovim {{{1
if has("nvim")
  " Faster startup
  let g:python_host_prog = expand('~') . '/.pyenv/versions/neovim2/bin/python'
  let g:python3_host_prog = expand('~') . '/.pyenv/versions/neovim3/bin/python'

  " Use the homebrew shell if it exists
  let brew_zsh = '/usr/local/bin/zsh'
  if !empty(glob(brew_zsh))
    " Vim takes the right side of the equal literally
    set shell=/usr/local/bin/zsh
  end

  autocmd!
  augroup nvimGroup
    " Don't display invisible characters
    autocmd TermOpen * setlocal nolist

    autocmd TermOpen * setlocal nonumber

    " Don't highlight words over 80 lines
    autocmd TermOpen * match none
  augroup END
endif

" Needs to be defined here for some reason (probably some plugin messing with the setting)
syntax enable

" FLEXPORT {{{1
